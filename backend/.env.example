# ============================================
# CREDO PROTOCOL - BACKEND ENVIRONMENT
# ============================================
# Backend service for MOCA AIR Kit integration
# Generates Partner JWTs for credential issuance
# Updated:  wave 3 (October 26, 2025)
# ============================================

# ============================================
# Partner Authentication (REQUIRED)
# ============================================
# Get these from https://developers.sandbox.air3.com/
# Account → General

# Your unique Partner ID
PARTNER_ID=your_partner_id_here

# Partner Secret (generate via: node -e "console.log(require('crypto').randomBytes(64).toString('hex'))")
# In production: Generate in AIR Kit Dashboard or use secure secret management
PARTNER_SECRET=your_partner_secret_here

# ============================================
# Issuer & Verifier DIDs (from Phase 5.1)
# ============================================
# Get these from AIR Kit Dashboard → Account → General
# MOCA provides 1 Issuer DID per partner account

# Your Issuer DID (used for all credential issuance)
ISSUER_DID=did:air:id:test:YOUR_ISSUER_DID_HERE

# Your Verifier DID (used for credential verification)
VERIFIER_DID=did:key:YOUR_VERIFIER_DID_HERE

# For backward compatibility (all point to same ISSUER_DID)
BANK_ISSUER_DID=did:air:id:test:YOUR_ISSUER_DID_HERE
EMPLOYMENT_ISSUER_DID=did:air:id:test:YOUR_ISSUER_DID_HERE
CEX_ISSUER_DID=did:air:id:test:YOUR_ISSUER_DID_HERE

# ============================================
# Schema IDs (from Phase 5.1)
# ============================================
# Create schemas in: AIR Kit Dashboard → Issuer → Schemas
# Copy the Schema IDs here

# Bank Balance Schemas
SCHEMA_BANK_HIGH=your_schema_id_here
SCHEMA_BANK_MEDIUM=your_schema_id_here
SCHEMA_BANK_LOW=your_schema_id_here
SCHEMA_BANK_MINIMAL=your_schema_id_here

# Income Range Schemas
SCHEMA_INCOME_HIGH=your_schema_id_here
SCHEMA_INCOME_MEDIUM=your_schema_id_here
SCHEMA_INCOME_LOW=your_schema_id_here
SCHEMA_INCOME_MINIMAL=your_schema_id_here

# Other Schemas
SCHEMA_CEX_HISTORY=your_schema_id_here
SCHEMA_EMPLOYMENT=your_schema_id_here

# ============================================
# Issuance Program IDs (REQUIRED - Phase 5.3)
# ============================================
# Create programs in: AIR Kit Dashboard → Issuer → Credentials
# These are what AIR Kit uses for credential issuance!
# Copy the Program IDs (not Schema IDs!) here

# Bank Balance Issuance Programs
PROGRAM_BANK_HIGH=your_program_id_here
PROGRAM_BANK_MEDIUM=your_program_id_here
PROGRAM_BANK_LOW=your_program_id_here
PROGRAM_BANK_MINIMAL=your_program_id_here

# Income Range Issuance Programs
PROGRAM_INCOME_HIGH=your_program_id_here
PROGRAM_INCOME_MEDIUM=your_program_id_here
PROGRAM_INCOME_LOW=your_program_id_here
PROGRAM_INCOME_MINIMAL=your_program_id_here

# Other Issuance Programs
PROGRAM_CEX_HISTORY=your_program_id_here
PROGRAM_EMPLOYMENT=your_program_id_here

# ============================================
# Verifier Program IDs (Optional - Phase 5.1)
# ============================================
# Create verifier programs in: AIR Kit Dashboard → Verifier → Programs
# Used for credential verification (optional for issuance)

# Bank Balance Verifier Programs
VERIFIER_PROGRAM_BANK_HIGH=your_verifier_program_id_here
VERIFIER_PROGRAM_BANK_MEDIUM=your_verifier_program_id_here
VERIFIER_PROGRAM_BANK_LOW=your_verifier_program_id_here
VERIFIER_PROGRAM_BANK_MINIMAL=your_verifier_program_id_here

# Income Range Verifier Programs
VERIFIER_PROGRAM_INCOME_HIGH=your_verifier_program_id_here
VERIFIER_PROGRAM_INCOME_MEDIUM=your_verifier_program_id_here
VERIFIER_PROGRAM_INCOME_LOW=your_verifier_program_id_here
VERIFIER_PROGRAM_INCOME_MINIMAL=your_verifier_program_id_here

# Other Verifier Programs
VERIFIER_PROGRAM_CEX_HISTORY=your_verifier_program_id_here
VERIFIER_PROGRAM_EMPLOYMENT=your_verifier_program_id_here

# ============================================
# $50 USDC Verification Faucet
# ============================================
# Verification program for employment credential verification
# This is the program ID for "Credo Employment Verification"
# Create in: AIR Kit Dashboard → Verifier → Programs
# Query: credentialType = EMPLOYMENT
VERIFICATION_PROGRAM_ID=your_verification_program_id_here

# Reward configuration
REWARD_AMOUNT=50

# USDC contract for rewards (MockUSDC on Moca Devnet)
# Update this with your deployed MockUSDC address
# Latest deployment (Nov 1, 2025): 0x8F8447EfF8E7d32ae1c89569Fa229FcC796cC036
USDC_CONTRACT_ADDRESS=your_usdc_contract_address_here

# Treasury wallet private key (for USDC distribution)
# Uses deployer wallet which holds the USDC supply
TREASURY_PRIVATE_KEY=your_deployer_private_key_here

# RPC URL for blockchain transactions
RPC_URL=https://devnet-rpc.mocachain.org

# ============================================
# Gas Sponsorship (Optional)
# ============================================
# Paymaster Policy ID for gas-sponsored credential issuance
# Leave empty to disable (users pay their own gas)
# Set up in: AIR Kit Dashboard → Account → Paymaster
PAYMASTER_POLICY_ID=

# ============================================
# Server Configuration
# ============================================
# Backend server port
PORT=3001

# Environment mode
NODE_ENV=development

# Frontend URL for CORS
FRONTEND_URL=http://localhost:3000

# ============================================
# RSA Keys (REQUIRED for Production Deployment)
# ============================================
# For production deployments (Render, AWS, etc.), add these as environment variables
# These are used for Partner JWT signing (RS256 algorithm)
#
# Generate with:
#   openssl genpkey -algorithm RSA -out private.key -pkeyopt rsa_keygen_bits:2048
#   openssl rsa -pubout -in private.key -out public.key
#
# Then format for environment variables (replace newlines with \n):
#   awk 'NF {sub(/\r/, ""); printf "%s\\n",$0;}' private.key
#   awk 'NF {sub(/\r/, ""); printf "%s\\n",$0;}' public.key
#
# LOCAL: Leave these empty (code reads from private.key and public.key files)
# PRODUCTION: Set these to your RSA keys (with \n escaped newlines)
#
PRIVATE_KEY=
PUBLIC_KEY=

# ============================================
# Mock Issuer Private Keys (CRITICAL FOR SIGNATURE VERIFICATION!)
# ============================================
# **IMPORTANT**: Use YOUR deployer/sandbox account private key here!
# 
# The backend derives the issuer address from this key, and that derived address
# MUST be registered as an issuer in the CreditScoreOracle contract.
#
# Why this matters:
# - Backend signs credentials with this private key
# - Contract verifies: ECDSA.recover(signature) == issuer address
# - If addresses don't match, signature verification fails
#
# Setup:
# 1. Use your MOCA sandbox deployer private key (the one that deployed contracts)
# 2. Verify derived address: node -e "const {Wallet}=require('ethers'); console.log(new Wallet('YOUR_KEY').address)"
# 3. Register that address as issuer: npx hardhat run scripts/register-user.ts --network moca-devnet
#
# For testing, you can use the same key for all three issuers.
# In production, each issuer would have their own secure key management.
#
MOCK_BANK_PRIVATE_KEY=your_deployer_private_key_here
MOCK_EMPLOYER_PRIVATE_KEY=your_deployer_private_key_here
MOCK_EXCHANGE_PRIVATE_KEY=your_deployer_private_key_here

# ============================================
# SETUP INSTRUCTIONS
# ============================================
# 
# 1. Copy this file:
#    cp .env.example .env
#
# 2. Set up AIR Kit Dashboard (Phase 5.1):
#    - Visit: https://developers.sandbox.air3.com/
#    - Connect wallet and fund fee wallets
#    - Copy Partner ID, Issuer DID, Verifier DID
#    - Create 10 schemas (bank, income, cex, employment)
#    - Create 10 issuance programs (one per schema)
#    - Create 10 verifier programs (optional)
#    - Generate Partner Secret
#
# 3. Generate RSA keys (Phase 5.2):
#    cd backend
#    openssl genpkey -algorithm RSA -out private.key -pkeyopt rsa_keygen_bits:2048
#    openssl rsa -pubout -in private.key -out public.key
#
#    For production (Render/Cloud deployment), add as environment variables:
#    - PRIVATE_KEY: Private key with \n for newlines (one long string)
#    - PUBLIC_KEY: Public key with \n for newlines (one long string)
#    
#    Local development uses files (private.key, public.key)
#    Production reads from environment variables
#
# 4. Update .env with your IDs:
#    - Replace all 'your_*_here' placeholders
#    - Fill in all Schema IDs from Step 2
#    - Fill in all Program IDs from Step 2
#
# 5. Install dependencies:
#    npm install
#
# 6. Start the server:
#    npm run dev
#
# 7. Test endpoints:
#    curl http://localhost:3001/health
#    curl http://localhost:3001/.well-known/jwks.json
#    curl http://localhost:3001/api/credentials/types
#
# ============================================
# API ENDPOINTS
# ============================================
# - GET  /health                           - Health check + MOCA status
# - GET  /.well-known/jwks.json           - JWKS endpoint for JWT validation
# - GET  /api/credentials/types           - List all 10 credential types
# - POST /api/credentials/prepare         - Generate Partner JWT + metadata
#
# ============================================
# MIGRATION NOTES
# ============================================
# ✅ Mock issuers REMOVED - replaced with Partner JWT auth
# ✅ Manual signing REMOVED - AIR Kit handles all signing
# ✅ Credentials now stored on MOCA Chain Storage Providers (MCSP)
# ✅ Gas sponsorship supported via Paymaster
# ✅ Full MOCA ecosystem integration
#
# See: documents/wave 3/PHASE5.2-BACKEND-REFACTOR.md
# ============================================
